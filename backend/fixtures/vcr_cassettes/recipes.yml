---
http_interactions:
- request:
    method: get
    uri: https://cdn.contentful.com/spaces/test_space_id/environments/master/entries?content_type=recipe
    body:
      encoding: UTF-8
      string: ''
    headers:
      X-Contentful-User-Agent:
      - sdk contentful.rb/2.15.4; platform ruby/2.7.1; os Linux;
      Authorization:
      - Bearer test_access_token
      Content-Type:
      - application/vnd.contentful.delivery.v1+json
      Accept-Encoding:
      - gzip
      Connection:
      - close
      Host:
      - cdn.contentful.com
      User-Agent:
      - http.rb/4.4.1
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - close
      Content-Length:
      - '15925'
      Access-Control-Allow-Headers:
      - Accept,Accept-Language,Authorization,Cache-Control,Content-Length,Content-Range,Content-Type,DNT,Destination,Expires,If-Match,If-Modified-Since,If-None-Match,Keep-Alive,Last-Modified,Origin,Pragma,Range,User-Agent,X-Http-Method-Override,X-Mx-ReqToken,X-Requested-With,X-Contentful-Version,X-Contentful-Content-Type,X-Contentful-Organization,X-Contentful-Skip-Transformation,X-Contentful-User-Agent,X-Contentful-Enable-Alpha-Feature
      Access-Control-Allow-Methods:
      - GET,HEAD,OPTIONS
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Expose-Headers:
      - Etag
      Access-Control-Max-Age:
      - '86400'
      Cf-Environment-Id:
      - master
      Cf-Environment-Uuid:
      - 3e111988-d2b3-4647-a0a8-ed1215cbd839
      Cf-Organization-Id:
      - 0OxgeKaTWSWzTukWE0scEe
      Cf-Space-Id:
      - kk2bw5ojx476
      Content-Type:
      - application/vnd.contentful.delivery.v1+json
      Contentful-Api:
      - cda_cached
      Etag:
      - W/"10585192923880385432"
      Server:
      - Contentful
      X-Content-Type-Options:
      - nosniff
      X-Contentful-Region:
      - us-east-1
      X-Contentful-Route:
      - "/spaces/:space/environments/:environment/entries"
      Accept-Ranges:
      - bytes
      Date:
      - Thu, 14 Jan 2021 11:11:30 GMT
      Via:
      - 1.1 varnish
      Age:
      - '13723'
      X-Served-By:
      - cache-hhn4032-HHN
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      Vary:
      - Accept-Encoding
      X-Contentful-Request-Id:
      - 8dac8dcf-2c34-43f0-893c-9ec4db251620
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    adapter_metadata:
      vcr_decompressed: gzip
  recorded_at: Thu, 14 Jan 2021 11:11:30 GMT
recorded_with: VCR 6.0.0
